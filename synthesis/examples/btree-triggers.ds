include "btree_lib.h";

cog Concat (
  cog lhs,
  cog rhs
);

cog BTree is Concat (
  long sep
);

cog Array (
  int start,
  int len,
  buffer records
);

cog SortedArray is Array ();

cog Empty ();

fun iterator scan(long low, long high) is
  | BTree(a, b, sep) with { sep <= low } -> {
    return scan(b, low, high);
  }
  
  | BTree(a, b, sep) with { sep >= high } -> {
    return scan(a, low, high);
  }
  
  | Concat(a, b) -> {
    return iter_concat(
      scan(a, low, high), 
      scan(b, low, high)
    );
  }
  
  | SortedArray(start, len, b) -> {
    return array_binarysearch_scan(low, high, start, len, b);
  }
  
  | Array(start, len, b) -> {
    return array_scan(low, high, start, len, b);
  }
  
  | Empty() -> {
    return iter_empty();
  }
;

fun void append(cog c) is
  | a -> Concat(a, c)
;

rule pivot_one(long key) is
  | BTree(a, b, sep) -> 
    case 
      when { sep > key  } -> apply a pivot_one(key)
      when { sep <= key } -> apply b pivot_one(key)
    end
  | SortedArray(_, _, _) as a -> a
  | Array(start, len, b) as a -> 
    {
      int lhsCount = record_pivot(b->data, key, start, len) - start;
      buffer_retain(b); //retain x2 - release x1 = retain x1 
    } 
    case
      when { lhsCount <= 0 }         -> BTree(Empty, a, key)
      when { lhsCount == start+len } -> BTree(a, Empty, key)
      else
        { int rhsStart = start + lhsCount;
          int rhsLen = len - lhsCount;
        }
        BTree(
          Array(start, lhsCount, b),
          Array(rhsStart, rhsLen, b),
          key
        )
    end
;

rule pushdown() is
  | Concat(BTree(a, b, sep), Array(start,len,b) as c) -> 
    { 
      int pivot; 
      buffer_retain(b);
    }
    case 
      when { c->type == COG_SORTEDARRAY } -> 
            { pivot = record_binary_search(b->data, sep, start, start+len) - low; }
      else  { pivot = record_pivot(b->data, sep, start, start+len) - low; }
    end
    case 
      when { pivot == start } ->
        BTree(a, Concat(b, c), sep)
      when { pivot == start+len } ->
        BTree(Concat(a, c), b, sep)
      else
        { int rhsLow = low + pivot;
          int rhsLen = len - pivot;
          buffer_retain(b);
        }
        BTree(
          Concat(a, Array(low, pivot, b)),
          Concat(b, Array(rhsLow, rhsLen, b)),
          sep
        ) 
    end
;          

