include "btree_lib.h";

cog Concat (
  pointer lhs,
  pointer rhs
);

cog BTree is Concat (
  long sep
);

cog Array (
  int start,
  int len,
  buffer records
);

cog SortedArray is Array ();

cog Empty ();

fun iterator scan(long low, long high) is
  | BTree(a, b, sep) with { sep <= low } -> {
    return scan(b, low, high);
  }
  
  | BTree(a, b, sep) with { sep >= high } -> {
    return scan(a, low, high);
  }
  
  | Concat(a, b) -> {
    return iter_concat(
      scan(a, low, high), 
      scan(b, low, high)
    );
  }
  
  | SortedArray(start, len, b) -> {
    return array_binarysearch_scan(low, high, start, len, b);
  }
  
  | Array(start, len, b) -> {
    return array_scan(low, high, start, len, b);
  }
  
  | Empty() -> {
    return iter_empty();
  }
;

fun void append(cog *c) is
  | a -> Concat(a, c)
;

trigger pivot_one(long key) over
  BTree(a, b, sep) -> 
    case 
      when { sep > key  } then recur [a]
      when { sep <= key } then recur [b]
    end
is
  | SortedArray(_, _, _) as a -> a
  | Array(start, len, b) as a -> 
    {
      int lhsCount = record_pivot(b->data, key, start, len) - start;
      buffer_retain(b); //retain x2 - release x1 = retain x1 
    } 
    case
      when { lhsCount <= 0 }         -> BTree(Empty, a, key)
      when { lhsCount == start+len } -> BTree(a, Empty, key)
      else
        BTree(
          Array(start, { lhsCount }, b),
          Array({ start+lhsCount }, { len - lhsCount } , b)
          key
        )
    end
;

trigger pushdown() is
  Concat(BTree(a, b, sep), Array(start,len,b) as c) -> 
    { 
      int pivot; 
      buffer_retain(b);
    }
    case 
      when c is SortedArray 
            { pivot = record_binary_search(b->data, sep, start, start+len) - low; }
      else  { pivot = record_pivot(b->data, sep, start, start+len) - low; }
    end
    case 
      when { pivot == start }
        BTree(a, Concat(b, c), sep)
      when { pivot == start+len }
        BTree(Concat(a, c), b, sep)
      else
        { buffer_retain(b); }
        BTree(
          Concat(a, Array(low, pivot, b)),
          Concat(b, Array({ low + pivot} , { len - pivot }, b)),
          sep
        ) 
    end
          
    

mode cracker is
  on scan(low, high) apply topdown pivot_one(low)
                     apply topdown pivot_one(high)
;
